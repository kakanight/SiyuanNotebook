{"ID":"20250704114252-77e46m8","Spec":"1","Type":"NodeDocument","Properties":{"id":"20250704114252-77e46m8","title":"LK光流算法和KLT光流追踪","type":"doc","updated":"20250707100156"},"Children":[{"ID":"20250707100009-j2z40f9","Type":"NodeParagraph","Properties":{"id":"20250707100009-j2z40f9","updated":"20250707100013"},"Children":[{"Type":"NodeText","Data":"公式推导"}]},{"ID":"20250707100013-6ftpgkh","Type":"NodeParagraph","Properties":{"id":"20250707100013-6ftpgkh","updated":"20250707100156"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"WechatIMG292"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/WechatIMG292-20250707100153-mt49re3.jpg"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20250704114349-ce66xgs","Type":"NodeParagraph","Properties":{"id":"20250704114349-ce66xgs","updated":"20250704114349"},"Children":[{"Type":"NodeText","Data":"LK光流本来是只有一个方程是无法解决的，只有一个约束的欠定方程，但是好就好在区域一致性理论，LK光流考虑到了像素点的邻域，将问题变成计算某些点集的嘎滚流，连理多个方程，从而解决这个问题。最后使用最小二乘法来求解uv。"}]},{"ID":"20250704114349-76qavar","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250704114349-76qavar","updated":"20250704114349"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"A.v = b\n\nimport numpy as np\n#梯度信息Ix,Iy,It\nIx = np.array([1,1,0,-1,0,1,-1,-1])\nIy = np.array([0,1,1,0,-1,-1,-1,1])\nIt = np.array([-1,-1,-1,-1,-1,-1,-1,-1])\n#构建矩阵A和向量b\nA = np.vstack([Ix，Iy]).T\nb = -It\n#使用最小二乘法来求解光流(u,v)\nnv = np.linalg.lstsq(A,b,rcond = None)[0]\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250704114349-stzexa8","Type":"NodeParagraph","Properties":{"id":"20250704114349-stzexa8","updated":"20250704114349"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"金字塔光流的动机"},{"Type":"NodeText","Data":"\nlucas-kanade 假设小运动，但图像中可能存在"},{"Type":"NodeTextMark","TextMarkType":"mark","TextMarkTextContent":"大位移，如快速移动，低帧率"},{"Type":"NodeText","Data":"，因此需要通过构建图像金字塔pyramid，将图像从低分辨率到高分辨率逐步迭代处理："}]},{"ID":"20250704114349-jqsfrf9","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20250704114349-jqsfrf9","updated":"20250704114349"},"Children":[{"ID":"20250704114349-sree46n","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20250704114349-sree46n","updated":"20250704114349"},"Children":[{"ID":"20250704114349-9jko1uu","Type":"NodeParagraph","Properties":{"id":"20250704114349-9jko1uu","updated":"20250704114349"},"Children":[{"Type":"NodeText","Data":"在金字塔的顶层：低分辨率估计一个粗略光流"}]}]},{"ID":"20250704114349-zcrrn2f","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20250704114349-zcrrn2f","updated":"20250704114349"},"Children":[{"ID":"20250704114349-v4wii85","Type":"NodeParagraph","Properties":{"id":"20250704114349-v4wii85","updated":"20250704114349"},"Children":[{"Type":"NodeText","Data":"逐层向高分辨率refine，精制这个结果"}]}]},{"ID":"20250704114349-k9kjsb3","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20250704114349-k9kjsb3","updated":"20250704114349"},"Children":[{"ID":"20250704114349-81vzrke","Type":"NodeParagraph","Properties":{"id":"20250704114349-81vzrke","updated":"20250704114349"},"Children":[{"Type":"NodeText","Data":"每一层中用lucas-kanade方法优化\nLucas-Kanade卢卡斯-卡纳德算法\n函数原型"}]}]}]},{"ID":"20250704114349-n401pig","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250704114349-n401pig","updated":"20250704114349"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"void cvCalcOpticalFlowPyrLK(\nconst CvArr* prev,\nconst CvArr* curr,\nCvarr* prev_pyr,\nCvArr* curr_pyr, \nconst CvPoint2D32f* prev_features,\nconst CvPoint2D32f* curr_features,\nint count, \nCvSize win_size,\nint level,\nchar* status,\nfloat* track_error, \nCvTermCriteria criteria, \nint flags)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250704114349-2dzwk4t","Type":"NodeParagraph","Properties":{"id":"20250704114349-2dzwk4t","updated":"20250704114349"},"Children":[{"Type":"NodeText","Data":"prev 在时间t的第一帧数\ncurr 在时间t+dt的第二帧\nprev_pyr第一帧的金字塔缓存，如果指针非NULL，则缓存必须有足够的空间来存储尽在他从层1到层#level的内容\ncurr_pyr 用于第二帧的金字塔缓存\nprev_features 需要发现光流的点集\ncurr_features包含计算出来的位置的点集\ncount 计算出来的特征点的数目\nwin_size每个金字塔层的搜索窗口尺寸\nlevel最大的金字塔的层数。如果为0，不使用金字塔，如果为1，使用2层，下面一次类推\nstatus 数组，如果对应特征的光流被发现，数组中的每一个元素都被设置为1，否则设置为0\nerror 双进度数组，包含原始图像碎片与移动点之间的差，为可选参数，可以为NULL\ncriteria 准则，指定在每个金字塔层，为某点寻找光流的迭代终止过程"}]},{"ID":"20250704114349-gebo8gy","Type":"NodeParagraph","Properties":{"id":"20250704114349-gebo8gy","updated":"20250707095703"},"Children":[{"Type":"NodeText","Data":"KLT与LK的前世今生\nLK方法是用于光流估计的基本方法，通过图像提督来求解光流，是KLT算法的核心计算部分\nKLT算法是一个特征点跟踪方法，通过图像中的关键点或焦点，利用光流估算这些点在连续帧上的位置。KLT算法的计算过程依赖于LK方法来估算光流\nKLT中的KL就是LK两个人，加上Tomasi\nKLT算法通常分为两个主要的步骤："}]},{"ID":"20250704114349-5z9yyi2","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20250704114349-5z9yyi2","updated":"20250704114349"},"Children":[{"ID":"20250704114349-b61dzkb","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20250704114349-b61dzkb","updated":"20250704114349"},"Children":[{"ID":"20250704114349-vdsaxw9","Type":"NodeParagraph","Properties":{"id":"20250704114349-vdsaxw9","updated":"20250704114349"},"Children":[{"Type":"NodeText","Data":"角点检测：使用Harris角点检测或者Tomasi角点检测等方法来检测图像中的特征点。"}]}]},{"ID":"20250704114349-xt5f2fq","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20250704114349-xt5f2fq","updated":"20250704114349"},"Children":[{"ID":"20250704114349-ywm692z","Type":"NodeParagraph","Properties":{"id":"20250704114349-ywm692z","updated":"20250704114349"},"Children":[{"Type":"NodeText","Data":"特征点跟踪：利用光流假设（物体的局部运动相对较小，相邻像素的光流蕾丝）来跟踪这些特征点在两帧图像之间的运动"}]}]}]}]}